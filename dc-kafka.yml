#
# docker volume create --name sandbox_kafka_secrets --opt type=none --opt device=/apps/sandbox/kafka-broker/secrets --opt o=bind
# docker volume create --name sandbox_kafka_data --opt type=none --opt device=/apps/sandbox/kafka-broker/data --opt o=bind
# docker volume create --name sandbox_kafka_log --opt type=none --opt device=/apps/sandbox/kafka-broker/log --opt o=bind
#
---
version: "3.9"

services:

  #
  nginx:
    image: brijeshdhaker/nginx:1.15.1
    container_name: nginx
    hostname: nginx.sandbox.net
    #map ports you will need
    ports:
      - 80:80
      - 5010:5010
      - 443:443
      - 8001:8001
    #add volume with the keytab file
    volumes:
      - sandbox_apps_path:/apps
      - ./conf/kerberos:/etc/kerberos
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
    environment:
      KRB5_CONFIG: "/etc/krb5.conf"
  #      KRB5_KTNAME: "/apps/security/keytabs/services/spnego.service.keytab"

  # Cassandra Server
  cassandra:
    image: cassandra:4.1
    hostname: cassandra
    container_name: cassandra
    restart: always
    ports:
      - "7000:7000"
      - "7001:7001"  #
      - "7199:7199"  # JMX
      - "9042:9042"  # Native Transport
      - "9160:9160"  # Thrift Clients
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_cassandra_data:/var/lib/cassandra
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  # Zookeeper Server
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper.sandbox.net
    container_name: zookeeper
    healthcheck:
      test: curl -f http://zookeeper.sandbox.net:8080/commands || exit 1
      retries: 20
      interval: 10s
    ports:
      - "2181:2181"
      - "2182:2182"
      - "28080:8080"
    volumes:
      - sandbox_apps_path:/apps
      - /apps/security/ssl:/etc/zookeeper/secrets
      - /apps/sandbox/zookeeper/hadoop311/data:/var/lib/zookeeper/data
      - /apps/sandbox/zookeeper/hadoop311/log:/var/lib/zookeeper/log
      - ./conf/kerberos/krb5.conf:/etc/krb5.conf
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SECURE_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      KRB5_CONFIG: "/etc/krb5.conf"
      # ALLOW_UNSIGNED: "true"
      #
      ZOOKEEPER_SERVER_CNXN_FACTORY: org.apache.zookeeper.server.NettyServerCnxnFactory
      ZOOKEEPER_SSL_KEYSTORE_LOCATION: /apps/security/ssl/zookeeper.keystore.jks
      ZOOKEEPER_SSL_KEYSTORE_PASSWORD: confluent
      ZOOKEEPER_SSL_KEYSTORE_TYPE: PKCS12
      ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /apps/security/ssl/zookeeper.truststore.jks
      ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: confluent
      ZOOKEEPER_SSL_TRUSTSTORE_TYPE: JKS
      ZOOKEEPER_SSL_CLIENT_AUTH: "need"
      #
      ZOOKEEPER_AUTH_PROVIDER_X509: org.apache.zookeeper.server.auth.X509AuthenticationProvider
      ZOOKEEPER_AUTH_PROVIDER_SASL: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
      #
      KAFKA_OPTS: -Djava.security.auth.login.config=/apps/security/jaas/zookeeper-jaas.conf
        -Djava.security.krb5.conf=/etc/krb5.conf
        -Dsun.security.krb5.debug=false
        -Dkerberos.removeHostFromPrincipal=true
        -Dkerberos.removeRealmFromPrincipal=true
        -Dzookeeper.skipACL=true
        #-Dzookeeper.requireClientAuthScheme=sasl
        #-Dzookeeper.allowSaslFailedClients=false
      #-Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
    labels:
      - io.confluent.docker.testing=true
    extra_hosts:
      - "thinkpad.sandbox.net:172.18.0.1"

  # Kafka Broker
  kafkabroker:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafkabroker.sandbox.net
    container_name: kafkabroker
    # restart: on-failure
    healthcheck:
      test: nc kafkabroker.sandbox.net 19091 || exit 1
      retries: 20
      interval: 10s
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 19091:19091
      - 19092:19092
      - 19093:19093
      - 19094:19094
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_kafka_data:/var/lib/kafka/data
      - /apps/security/ssl:/etc/kafka/secrets
      - ./conf/kerberos/krb5.conf:/etc/krb5.conf
    environment:
      KRB5_CONFIG: "/etc/krb5.conf"
      KAFKA_BROKER_ID: "1"
      KAFKA_BROKER_RACK: "R1"
      KAFKA_JMX_PORT: 9991
      #
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper.sandbox.net:2182'
      KAFKA_ZOOKEEPER_CLIENT_CNXN_SOCKET: org.apache.zookeeper.ClientCnxnSocketNetty
      KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE: 'true'
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_LOCATION: /apps/security/ssl/kafkabroker.keystore.jks
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_PASSWORD: confluent
      KAFKA_ZOOKEEPER_SSL_KEYSTORE_TYPE: PKCS12
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /apps/security/ssl/kafkabroker.truststore.jks
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: confluent
      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_TYPE: JKS
      KAFKA_ZOOKEEPER_SET_ACL: 'true'

      # KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE: 'true'
      # https://docs.confluent.io/platform/current/kafka/multi-node.html#configure-multi-node-environment
      # KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19092, SASL_SSL://0.0.0.0:19093, EXTERNAL_PLAIN://0.0.0.0:9092, EXTERNAL_SASL://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_SSL,SSL:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: EXTERNAL
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkabroker.sandbox.net:19091,INTERNAL://kafkabroker.sandbox.net:19092,EXTERNAL://kafkabroker.sandbox.net:19093,SSL://kafkabroker.sandbox.net:19094
      #KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      #
      ## Kerberos / GSSAPI Authentication mechanism
      KAFKA_SASL_KERBEROS_SERVICE_NAME: kafka
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN,GSSAPI
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: GSSAPI
      #
      ## Listener INTERNAL Configuration
      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret" \
        user_admin="admin-secret" \
        user_mds="mds-secret";
      #
      ## Listener TOKEN Configuration
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_ENABLED_MECHANISMS: GSSAPI
      KAFKA_LISTENER_NAME_EXTERNAL_GSSAPI_SASL_JAAS_CONFIG: |
        com.sun.security.auth.module.Krb5LoginModule required \
        debug=true \
        useKeyTab=true \
        storeKey=true \
        keyTab="/apps/security/keytabs/services/kafkabroker.keytab" \
        principal="kafka/kafkabroker.sandbox.net@SANDBOX.NET";
      #
      ## SSL Additions
      KAFKA_SSL_KEYSTORE_FILENAME: kafkabroker.keystore.p12
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafkabroker-keystore-creds
      KAFKA_SSL_KEY_CREDENTIALS: kafkabroker-sslkey-creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafkabroker.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafkabroker-truststore-creds
      # To enable the broker to authenticate clients (two-way authentication)
      KAFKA_SSL_CLIENT_AUTH: "required"
      # The endpoint identification algorithm used by clients to validate server host name.
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      #
      KAFKA_LISTENER_NAME_EXTERNAL_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9.]*).*$$/$$1/ , DEFAULT
      KAFKA_LISTENER_NAME_SSL_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9.]*).*$$/$$1/ , DEFAULT
      ##
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_OPTS:
        -Djava.security.auth.login.config=/apps/security/jaas/kafkabroker-jaas.conf
        -Djava.security.krb5.conf=/etc/krb5.conf
        -Dsun.security.krb5.debug=false
        -Dssl.keystore.location=/apps/security/ssl/kafkabroker.keystore.p12
        -Dssl.keystore.password=confluent
        -Dssl.key.password=confluent
        -Dssl.truststore.location=/apps/security/ssl/kafkabroker.truststore.jks
        -Dssl.truststore.password=confluent
      #
      ## Log4J
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,org.apache.kafka=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_LOGGER_KAFKA_AUTHORIZER_LOGGER: "INFO, authorizerAppender"
      KAFKA_LOG4J_ADDITIVITY_KAFKA_AUTHORIZER_LOGGER: "false"
      ##
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: https://schemaregistry.sandbox.net:8081
      #KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafkabroker.sandbox.net:19093
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    extra_hosts:
      - "thinkpad.sandbox.net:172.18.0.1"

  #
  schemaregistry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schemaregistry.sandbox.net
    container_name: schemaregistry
    depends_on:
      - kafkabroker
    ports:
      - "8081:8081"
    healthcheck:
      test: nc schemaregistry.sandbox.net 8081 || exit 1
      retries: 20
      interval: 10s
    volumes:
      - sandbox_apps_path:/apps
      - ./conf/kerberos/krb5.conf:/etc/krb5.conf
    environment:
      KRB5_CONFIG: "/etc/krb5.conf"
      JAVA_OPTS: |
        -Djava.security.krb5.conf=/etc/krb5.conf 
        -Dsun.security.krb5.debug=false
        -Djavax.net.ssl.keyStore=/apps/security/ssl/schemaregistry.keystore.jks
        -Djavax.net.ssl.keyStorePassword=confluent
        -Djavax.net.ssl.trustStore=/apps/security/ssl/schemaregistry.truststore.jks
        -Djavax.net.ssl.trustStorePassword=confluent
      #
      SCHEMA_REGISTRY_OPTS: "-Djava.security.krb5.conf=/etc/krb5.conf -Dsun.security.krb5.debug=false"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry.sandbox.net
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafkabroker.sandbox.net:19093'
      # Configure SASL_SSL if SSL encryption is enabled, otherwise configure SASL_PLAINTEXT
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SASL_SSL
      SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM: GSSAPI
      SCHEMA_REGISTRY_KAFKASTORE_SASL_KERBEROS_SERVICE_NAME: kafka
      SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG: com.sun.security.auth.module.Krb5LoginModule required
        useKeyTab=true
        storeKey=true
        useTicketCache=false
        keyTab="/apps/security/keytabs/services/schemaregistry.keytab"
        principal="schemaregistry/schemaregistry.sandbox.net@SANDBOX.NET";
      #
      SCHEMA_REGISTRY_LISTENERS: https://0.0.0.0:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      #
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: /apps/security/ssl/schemaregistry.truststore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: confluent
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION: /apps/security/ssl/schemaregistry.keystore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD: confluent
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD: confluent
      SCHEMA_REGISTRY_KAFKASTORE_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "HTTPS"
      #
      SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /apps/security/ssl/schemaregistry.truststore.jks
      SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: confluent
      SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: /apps/security/ssl/schemaregistry.keystore.jks
      SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: confluent
      SCHEMA_REGISTRY_SSL_KEY_PASSWORD: confluent
      SCHEMA_REGISTRY_SSL_CLIENT_AUTH: "true"
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "https"
    extra_hosts:
      - "thinkpad.sandbox.net:172.18.0.1"

  #
  kafkaclient:
    image: brijeshdhaker/kafka-clients:7.5.0
    hostname: kafkaclient.sandbox.net
    container_name: kafkaclient
    restart: on-failure
    command: sleep infinity
    volumes:
      - sandbox_apps_path:/apps
      - ./conf/kerberos/krb5.conf:/etc/krb5.conf
    environment:
      KRB5_CONFIG: "/etc/krb5.conf"
    extra_hosts:
      - "thinkpad.sandbox.net:172.18.0.1"

#
volumes:
  #
  sandbox_apps_path:
    external: true
  #
  sandbox_zookeeper_secrets:
    external: true
  sandbox_zookeeper_data:
    external: true
  sandbox_zookeeper_log:
    external: true
  #
  sandbox_kafka_secrets:
    external: true
  sandbox_kafka_data:
    external: true
  sandbox_kafka_log:
    external: true

#
networks:
  default:
    external: true
    driver: bridge
    name: sandbox.net