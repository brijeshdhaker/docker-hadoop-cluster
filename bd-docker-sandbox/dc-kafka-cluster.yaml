#
# docker compose -f bd-docker-sandbox/dc-kafka-cluster.yaml up -d
# docker compose -f bd-docker-sandbox/dc-kafka-cluster.yaml down
#
# docker volume create --name sandbox_security_secrets --opt type=none --opt device=/apps/security/ssl --opt o=bind
#
# docker volume create --name sandbox_zookeeper_data --opt type=none --opt device=/apps/sandbox/zookeeper/data --opt o=bind
# docker volume create --name sandbox_zookeeper_log --opt type=none --opt device=/apps/sandbox/zookeeper/log --opt o=bind
#
# docker volume create --name sandbox_kafka_data --opt type=none --opt device=/apps/sandbox/kafka/data --opt o=bind
# docker volume create --name sandbox_kafka_log --opt type=none --opt device=/apps/sandbox/kafka/log --opt o=bind
#
# docker volume create --name sandbox_schema_registry_data --opt type=none --opt device=/apps/sandbox/schema-registry/data --opt o=bind
# docker volume create --name sandbox_schema_registry_log --opt type=none --opt device=/apps/sandbox/schema-registry/log --opt o=bind
#
---
version: "3.9"

services:
  #
  # Zookeeper Server
  #
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    hostname: zookeeper.sandbox.net
    container_name: zookeeper
    healthcheck:
      test: curl -f http://zookeeper.sandbox.net:8080/commands || exit 1
      retries: 20
      interval: 10s
    ports:
      - "2181:2181"
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_security_secrets:/etc/zookeeper/secrets
      - sandbox_zookeeper_data:/var/lib/zookeeper/data
      - sandbox_zookeeper_log:/var/lib/zookeeper/log
      - ./conf/kerberos/krb5.conf:/etc/krb5.conf
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_UNSIGNED: "true"

  #
  # Apache Kafka Server
  #
  kafkabroker:
    image: confluentinc/cp-kafka:7.5.2
    hostname: kafkabroker.sandbox.net
    container_name: kafkabroker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: nc -vz kafkabroker.sandbox.net 19092 || exit 1
      retries: 20
      interval: 10s
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_security_secrets:/etc/kafka/secrets
      - sandbox_kafka_data:/var/lib/kafka/data
      - sandbox_kafka_log:/var/lib/kafka/log
      - ./conf/kerberos/krb5.conf:/etc/krb5.conf
    environment:
      KRB5_CONFIG: "/etc/krb5.conf"
      KAFKA_BROKER_ID: "1"
      KAFKA_BROKER_RACK: "R1"
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper.sandbox.net:2181'
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_LISTENERS: INTERNAL://kafkabroker.sandbox.net:19092,EXTERNAL://kafkabroker.sandbox.net:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafkabroker.sandbox.net:19092,EXTERNAL://kafkabroker.sandbox.net:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schemaregistry.sandbox.net:8081
      KAFKA_CREATE_TOPICS: "kafka:1:1"
      # HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"

  #
  #
  #
  schemaregistry:
    image: confluentinc/cp-schema-registry:7.5.2
    hostname: schemaregistry.sandbox.net
    container_name: schemaregistry
    depends_on:
      - zookeeper
      - kafkabroker
    healthcheck:
      test: curl -f http://schemaregistry.sandbox.net:8081 || exit 1
      retries: 20
      interval: 10s
    ports:
      - "8081:8081"
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_security_secrets:/etc/schema-registry/secrets
      - sandbox_schema_registry_data:/var/lib/schema-registry/data
      - sandbox_schema_registry_log:/var/lib/schema-registry/log
      - ./conf/kerberos/krb5.conf:/etc/krb5.conf
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafkabroker.sandbox.net:19092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO

  #
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.2
    hostname: control-center.sandbox.net
    container_name: control-center
    depends_on:
      - kafkabroker
      - schemaregistry
#      - connect
#      - ksqldb-server
    healthcheck:
      test: curl -f http://control-center.sandbox.net:9021 || exit 1
      retries: 20
      interval: 10s
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafkabroker.sandbox.net:19092'
#      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
#      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
#      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schemaregistry.sandbox.net:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  #
  kafkaclient:
    image: brijeshdhaker/kafka-clients:7.5.0
    hostname: kafkaclient.sandbox.net
    container_name: kafkaclient
    restart: on-failure
    command: sleep infinity
    healthcheck:
      test: echo $HOSTNAME || exit 1
      retries: 20
      interval: 10s
    volumes:
      - sandbox_apps_path:/apps
      - ./conf/kerberos/krb5.conf:/etc/krb5.conf
    environment:
      KRB5_CONFIG: "/etc/krb5.conf"
    extra_hosts:
      - "thinkpad.sandbox.net:172.18.0.1"


#
volumes:
  sandbox_apps_path:
    external: true
  sandbox_security_secrets:
    external: true
  #
  sandbox_zookeeper_data:
    external: true
  sandbox_zookeeper_log:
    external: true
  #
  sandbox_kafka_data:
    external: true
  sandbox_kafka_log:
    external: true
  #
  sandbox_schema_registry_data:
    external: true
  sandbox_schema_registry_log:
    external: true

#
networks:
  default:
    external: true
    driver: bridge
    name: sandbox.net