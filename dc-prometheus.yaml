#
#
# docker volume create --name sandbox_prometheus --opt type=none --opt device=/apps/sandbox/monitoring/prometheus --opt o=bind
# docker volume create --name sandbox_prometheus_data --opt type=none --opt device=/apps/sandbox/monitoring/prometheus --opt o=bind
#
# docker volume create --name sandbox_grafana_provisioning --opt type=none --opt device=/apps/sandbox/monitoring/grafana/provisioning --opt o=bind
# docker volume create --name sandbox_grafana_data --opt type=none --opt device=/apps/sandbox/monitoring/grafana/data --opt o=bind
#
# docker volume create --name sandbox_alert_manager --opt type=none --opt device=/apps/sandbox/monitoring/alert-manager --opt o=bind
# docker volume create --name sandbox_alert_manager_data --opt type=none --opt device=/apps/sandbox/monitoring/alert-manager/data --opt o=bind
#
---
version: "3.9"

services:

#
# Prometheus Server
#
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - sandbox_host_path:/apps/hostpath
      - sandbox_base_path:/apps/sandbox
      - sandbox_prometheus_data:/prometheus
      - ./conf/monitoring:/etc/prometheus
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

#
#
#
  node-exporter:
    image: prom/node-exporter:latest
    hostname: node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global

#
#
#
  alert-manager:
    image: prom/alertmanager
    hostname: alert-manager
    container_name: alert-manager
    labels:
      type: prom-alertmanager
    ports:
      - 9003:9093
    volumes:
      - sandbox_alert_manager_data:/alertmanager
      - ./conf/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: always
  #    deploy:
  #      placement:
  #        constraints:
  #          - node.hostname == ${HOSTNAME}


  #
  #
  #
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    hostname: cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
#      - /dev/disk/:/dev/disk:ro
    ports:
      - 8080:8080
    restart: always
    deploy:
      mode: global

  #
  # graphite-exporter
  #
  graphite-exporter:
    image: docker.io/prom/graphite-exporter:latest
    hostname: graphite-exporter
    container_name: graphite-exporter
    restart: always
    command:
      - --graphite.mapping-config=/tmp/graphite_mapping.yaml
    ports:
      - "9108:9108"       # api
      - "9109:9109"       # graphite tcp
      - "9109:9109/udp"   # graphite udp
    volumes:
      - sandbox_host_path:/apps/hostpath
      - sandbox_base_path:/apps/sandbox
      - ./conf/monitoring/graphite_mapping.yaml:/tmp/graphite_mapping.yaml

  #
  #
  #
#  statsd-exporter:
#    image: prom/statsd-exporter
#    hostname: statsd-exporter
#    container_name: statsd-exporter
#    command: --statsd.mapping-config=/tmp/statsd_mapping.yaml
#    ports:
#      - 9102:9102
#      - 9125:9125
#      - 9125:9125/udp
#    volumes:
#      - ./conf/monitoring/statsd_mapping.yaml:/tmp/statsd_mapping.yaml

  #
  #
  #
  grafana:
    image: grafana/grafana
    hostname: grafana
    container_name: grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - sandbox_grafana_data:/var/lib/grafana
      - sandbox_grafana_provisioning:/etc/grafana/provisioning/
    env_file:
      - envs/docker_grafana.env
    restart: always

#
volumes:
  sandbox_host_path:
    external: true
  sandbox_base_path:
    external: true
  sandbox_prometheus:
    external: true
  sandbox_prometheus_data:
    external: true
  sandbox_grafana_data:
    external: true
  sandbox_grafana_provisioning:
    external: true
  sandbox_alert_manager:
    external: true
  sandbox_alert_manager_data:
    external: true

#
networks:
  default:
    external: true
    driver: bridge
    name: sandbox-bigdata.net