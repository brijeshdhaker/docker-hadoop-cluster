/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.examples.sb.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8148867167675384934L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"org.examples.sb.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"]},{\"name\":\"uuid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"logicalType\":\"uuid\"},{\"name\":\"cardtype\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"website\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"product\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"amount\",\"type\":[\"null\",\"double\"]},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"addts\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Integer id;
  private java.lang.String uuid;
  private java.lang.String cardtype;
  private java.lang.String website;
  private java.lang.String product;
  private java.lang.Double amount;
  private java.lang.String city;
  private java.lang.String country;
  private java.lang.Long addts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param uuid The new value for uuid
   * @param cardtype The new value for cardtype
   * @param website The new value for website
   * @param product The new value for product
   * @param amount The new value for amount
   * @param city The new value for city
   * @param country The new value for country
   * @param addts The new value for addts
   */
  public Transaction(java.lang.Integer id, java.lang.String uuid, java.lang.String cardtype, java.lang.String website, java.lang.String product, java.lang.Double amount, java.lang.String city, java.lang.String country, java.lang.Long addts) {
    this.id = id;
    this.uuid = uuid;
    this.cardtype = cardtype;
    this.website = website;
    this.product = product;
    this.amount = amount;
    this.city = city;
    this.country = country;
    this.addts = addts;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return uuid;
    case 2: return cardtype;
    case 3: return website;
    case 4: return product;
    case 5: return amount;
    case 6: return city;
    case 7: return country;
    case 8: return addts;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: uuid = value$ != null ? value$.toString() : null; break;
    case 2: cardtype = value$ != null ? value$.toString() : null; break;
    case 3: website = value$ != null ? value$.toString() : null; break;
    case 4: product = value$ != null ? value$.toString() : null; break;
    case 5: amount = (java.lang.Double)value$; break;
    case 6: city = value$ != null ? value$.toString() : null; break;
    case 7: country = value$ != null ? value$.toString() : null; break;
    case 8: addts = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'cardtype' field.
   * @return The value of the 'cardtype' field.
   */
  public java.lang.String getCardtype() {
    return cardtype;
  }


  /**
   * Sets the value of the 'cardtype' field.
   * @param value the value to set.
   */
  public void setCardtype(java.lang.String value) {
    this.cardtype = value;
  }

  /**
   * Gets the value of the 'website' field.
   * @return The value of the 'website' field.
   */
  public java.lang.String getWebsite() {
    return website;
  }


  /**
   * Sets the value of the 'website' field.
   * @param value the value to set.
   */
  public void setWebsite(java.lang.String value) {
    this.website = value;
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public java.lang.String getProduct() {
    return product;
  }


  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(java.lang.String value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.String getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'addts' field.
   * @return The value of the 'addts' field.
   */
  public java.lang.Long getAddts() {
    return addts;
  }


  /**
   * Sets the value of the 'addts' field.
   * @param value the value to set.
   */
  public void setAddts(java.lang.Long value) {
    this.addts = value;
  }

  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static org.examples.sb.avro.Transaction.Builder newBuilder() {
    return new org.examples.sb.avro.Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static org.examples.sb.avro.Transaction.Builder newBuilder(org.examples.sb.avro.Transaction.Builder other) {
    if (other == null) {
      return new org.examples.sb.avro.Transaction.Builder();
    } else {
      return new org.examples.sb.avro.Transaction.Builder(other);
    }
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static org.examples.sb.avro.Transaction.Builder newBuilder(org.examples.sb.avro.Transaction other) {
    if (other == null) {
      return new org.examples.sb.avro.Transaction.Builder();
    } else {
      return new org.examples.sb.avro.Transaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    private java.lang.Integer id;
    private java.lang.String uuid;
    private java.lang.String cardtype;
    private java.lang.String website;
    private java.lang.String product;
    private java.lang.Double amount;
    private java.lang.String city;
    private java.lang.String country;
    private java.lang.Long addts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.examples.sb.avro.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.cardtype)) {
        this.cardtype = data().deepCopy(fields()[2].schema(), other.cardtype);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.website)) {
        this.website = data().deepCopy(fields()[3].schema(), other.website);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.product)) {
        this.product = data().deepCopy(fields()[4].schema(), other.product);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.city)) {
        this.city = data().deepCopy(fields()[6].schema(), other.city);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.addts)) {
        this.addts = data().deepCopy(fields()[8].schema(), other.addts);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(org.examples.sb.avro.Transaction other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cardtype)) {
        this.cardtype = data().deepCopy(fields()[2].schema(), other.cardtype);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.website)) {
        this.website = data().deepCopy(fields()[3].schema(), other.website);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.product)) {
        this.product = data().deepCopy(fields()[4].schema(), other.product);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.city)) {
        this.city = data().deepCopy(fields()[6].schema(), other.city);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.addts)) {
        this.addts = data().deepCopy(fields()[8].schema(), other.addts);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setUuid(java.lang.String value) {
      validate(fields()[1], value);
      this.uuid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardtype' field.
      * @return The value.
      */
    public java.lang.String getCardtype() {
      return cardtype;
    }


    /**
      * Sets the value of the 'cardtype' field.
      * @param value The value of 'cardtype'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setCardtype(java.lang.String value) {
      validate(fields()[2], value);
      this.cardtype = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cardtype' field has been set.
      * @return True if the 'cardtype' field has been set, false otherwise.
      */
    public boolean hasCardtype() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cardtype' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearCardtype() {
      cardtype = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'website' field.
      * @return The value.
      */
    public java.lang.String getWebsite() {
      return website;
    }


    /**
      * Sets the value of the 'website' field.
      * @param value The value of 'website'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setWebsite(java.lang.String value) {
      validate(fields()[3], value);
      this.website = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'website' field has been set.
      * @return True if the 'website' field has been set, false otherwise.
      */
    public boolean hasWebsite() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'website' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearWebsite() {
      website = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public java.lang.String getProduct() {
      return product;
    }


    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setProduct(java.lang.String value) {
      validate(fields()[4], value);
      this.product = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearProduct() {
      product = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setAmount(java.lang.Double value) {
      validate(fields()[5], value);
      this.amount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setCity(java.lang.String value) {
      validate(fields()[6], value);
      this.city = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearCity() {
      city = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setCountry(java.lang.String value) {
      validate(fields()[7], value);
      this.country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearCountry() {
      country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'addts' field.
      * @return The value.
      */
    public java.lang.Long getAddts() {
      return addts;
    }


    /**
      * Sets the value of the 'addts' field.
      * @param value The value of 'addts'.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder setAddts(java.lang.Long value) {
      validate(fields()[8], value);
      this.addts = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'addts' field has been set.
      * @return True if the 'addts' field has been set, false otherwise.
      */
    public boolean hasAddts() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'addts' field.
      * @return This builder.
      */
    public org.examples.sb.avro.Transaction.Builder clearAddts() {
      addts = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.uuid = fieldSetFlags()[1] ? this.uuid : (java.lang.String) defaultValue(fields()[1]);
        record.cardtype = fieldSetFlags()[2] ? this.cardtype : (java.lang.String) defaultValue(fields()[2]);
        record.website = fieldSetFlags()[3] ? this.website : (java.lang.String) defaultValue(fields()[3]);
        record.product = fieldSetFlags()[4] ? this.product : (java.lang.String) defaultValue(fields()[4]);
        record.amount = fieldSetFlags()[5] ? this.amount : (java.lang.Double) defaultValue(fields()[5]);
        record.city = fieldSetFlags()[6] ? this.city : (java.lang.String) defaultValue(fields()[6]);
        record.country = fieldSetFlags()[7] ? this.country : (java.lang.String) defaultValue(fields()[7]);
        record.addts = fieldSetFlags()[8] ? this.addts : (java.lang.Long) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.id);
    }

    if (this.uuid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uuid);
    }

    out.writeString(this.cardtype);

    out.writeString(this.website);

    out.writeString(this.product);

    if (this.amount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.amount);
    }

    out.writeString(this.city);

    out.writeString(this.country);

    if (this.addts == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.addts);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.uuid = null;
      } else {
        this.uuid = in.readString();
      }

      this.cardtype = in.readString();

      this.website = in.readString();

      this.product = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.amount = null;
      } else {
        this.amount = in.readDouble();
      }

      this.city = in.readString();

      this.country = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.addts = null;
      } else {
        this.addts = in.readLong();
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readInt();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uuid = null;
          } else {
            this.uuid = in.readString();
          }
          break;

        case 2:
          this.cardtype = in.readString();
          break;

        case 3:
          this.website = in.readString();
          break;

        case 4:
          this.product = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amount = null;
          } else {
            this.amount = in.readDouble();
          }
          break;

        case 6:
          this.city = in.readString();
          break;

        case 7:
          this.country = in.readString();
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.addts = null;
          } else {
            this.addts = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










