#
server:
  port: 9080
  servlet:
    context-path: /api/v1
  http2:
    enabled: true
#
springdoc:
  api-docs:
    path: /api-docs
#
spring:
  #
#  config:
#    activate:
#      on-profile: default
  #
  application:
    name: bd-spring-module
  output.ansi.enabled: ALWAYS
  #
  datasource:
    name: SANDBOXDB
    username: sa
    password: sa
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:SANDBOXDB;DB_CLOSE_DELAY=-1
  #  url: jdbc:h2:file:/apps/hostpath/databases/SANDBOXDB;AUTO_SERVER=true;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;
  #
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        web-allow-others: true
  #
#  sql:
#    init:
#      mode: always
#      schema-locations: classpath*:schema.sql
#      data-locations: classpath*:data.sql
  #
  jpa:
    # database-platform: org.hibernate.dialect.MySQLDialect
    # database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
      use-new-id-gnerator-mappings: false
      dialect: org.hibernate.dialect.H2Dialect
    properties:
      hibernate:
        show-sql: true
        use-sql-comments: true
        format-sql: true
        type: info
  #
  liquibase:
    enabled: true
    change-log: classpath:liquibase/master.yml
    contexts: h2
    parameters:
      textColumnType: TEXT
  #
  cache:
    jcache:
      config: classpath:ehcache.xml
  #
  kafka:
    transaction-topic: transaction-avro-topic
    bootstrap-servers:
      - kafkabroker.sandbox.net:9092
    properties:
      # Schema Registry Connection parameter
      schema.registry.url: http://schemaregistry.sandbox.net:8081
      schema.registry.ssl.keystore.location: /apps/security/ssl/clients.keystore.jks
      schema.registry.ssl.keystore.password: confluent
      schema.registry.ssl.key.password: confluent
      schema.registry.ssl.keystore.type: JKS
      schema.registry.ssl.truststore.location: /apps/security/ssl/clients.truststore.jks
      schema.registry.ssl.truststore.password: confluent
    consumer:
      properties:
        specific.avro.reader: false
        # spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        # spring.deserializer.value.delegate.class: io.confluent.kafka.serializers.KafkaAvroDeserializer
      group-id: sb-sandbox-cg
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      #value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
    producer:
      #properties:
      #  allow.auto.create.topics: false
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
#
management:
  security:
    enabled: false
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: "*"
  endpoint:
    info:
      enabled: true
#
logging:
  level:
    root: info
    org.springframework.kafka: error
    org.springframework.transaction: trace