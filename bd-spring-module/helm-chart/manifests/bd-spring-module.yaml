---
# Source: bd-spring-module/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-devops
  labels:
    date: 2025-04-19
    helm.sh/chart: bd-spring-module-0.1.0
    app.kubernetes.io/name: springboot-app
    app.kubernetes.io/instance: bd-spring-module
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
imagePullSecrets:
  - name: docker-reg-cred
---
# Source: bd-spring-module/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: password-secret
type: Opaque
data:
  password: bXlzZWNyZXRz
---
# Source: bd-spring-module/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: springboot-app-secret
type: Opaque
data:
  token: bXlzZWNyZXRz
---
# Source: bd-spring-module/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: springboot-app-configmap
data:
  environment: "K8S"
  message: "Hello World"
  #
  toppings: |-
    - "Mushrooms"
    - "Cheese"
    - "Peppers"
    - "Onions"
    - "Pineapple"
  #
  sizes: |-
    - small
    - medium
    - large
  #
  pizzaToppings: |-
      0: mushrooms
      1: cheese
      2: peppers
      3: onions
      4: pineapple
  #
  drink: "coffee"
  food: "Bread"
  #
  application.yaml: |- 
    kafka:
      transaction-topic: transaction-avro-topic
    topic:
      name: users
      partitions-num: 1
      replication-factor: 1
    server:
      port: 9080
      servlet:
        context-path: /api/v1
      http2:
        enabled: true
    #
    spring:
      application:
        name: bd-spring-module
      #
      datasource:
        name: SANDBOXDB
        username: mysqladmin
        password: mysqladmin
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://mysql-service.sb-apps.svc.cluster.local:3306/SANDBOXDB?zeroDateTimeBehavior=CONVERT_TO_NULL
      #
      jpa:
        database-platform: org.hibernate.dialect.MySQLDialect
        hibernate:
          ddl-auto: update
          use-new-id-gnerator-mappings: false
        properties:
          hibernate:
            show-sql: true
            use-sql-comments: true
            format-sql: true
            type: info
      #
      kafka:
        transaction-topic: transaction-avro-topic
        bootstrap-servers:
          - kafka-service.sb-apps.svc.cluster.local:9092
        properties:
          # Schema Registry Connection parameter
          schema.registry.url: http://kafka-service.sb-apps.svc.cluster.local:8081
          schema.registry.ssl.keystore.location: /apps/security/ssl/clients.keystore.jks
          schema.registry.ssl.keystore.password: confluent
          schema.registry.ssl.key.password: confluent
          schema.registry.ssl.keystore.type: JKS
          schema.registry.ssl.truststore.location: /apps/security/ssl/clients.truststore.jks
          schema.registry.ssl.truststore.password: confluent
        consumer:
          properties:
            specific.avro.reader: false
            # spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
            # spring.deserializer.value.delegate.class: io.confluent.kafka.serializers.KafkaAvroDeserializer
          group-id: sb-sandbox-cg
          auto-offset-reset: earliest
          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
          #value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
          interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
        producer:
          #properties:
          #  allow.auto.create.topics: false
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
          interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
        template:
          default-topic: transaction-avro-topic
    #
    management:
      security:
        enabled: false
      endpoints:
        enabled-by-default: true
        web:
          exposure:
            include: "*"
      endpoint:
        info:
          enabled: true
    #
    logging:
      level:
        root: info
        org.springframework.kafka: info
        org.springframework.transaction: info
---
# Source: bd-spring-module/templates/volumes.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: springboot-app-volume
  labels:
    date: 2025-04-19
    helm.sh/chart: bd-spring-module-0.1.0
    app.kubernetes.io/name: springboot-app
    app.kubernetes.io/instance: bd-spring-module
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  namespace: sb-apps
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /apps/sandbox
---
# Source: bd-spring-module/templates/volumes-claims.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: springboot-app-pvc
  labels:
    date: 2025-04-19
    helm.sh/chart: bd-spring-module-0.1.0
    app.kubernetes.io/name: springboot-app
    app.kubernetes.io/instance: bd-spring-module
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  namespace: sb-apps
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
# Source: bd-spring-module/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: springboot-app-svc
  labels:
    date: 2025-04-19
    helm.sh/chart: bd-spring-module-0.1.0
    app.kubernetes.io/name: springboot-app
    app.kubernetes.io/instance: bd-spring-module
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9080
      targetPort: 9080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: springboot-app
    app.kubernetes.io/instance: bd-spring-module

#
---
# Source: bd-spring-module/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
    - name: mysql
      protocol: TCP
      port: 3306
      targetPort: 3306

#
---
# Source: bd-spring-module/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-docker
  labels:
    date: 2025-04-06
spec:
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
      protocol: TCP

#
---
# Source: bd-spring-module/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
spec:
  ports:
    - name: kafka
      protocol: TCP
      port: 9092
      targetPort: 9092
    - name: schema-registry
      protocol: TCP
      port: 8081
      targetPort: 8081
#
---
# Source: bd-spring-module/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-app
  labels:
    date: 2025-04-19
    helm.sh/chart: bd-spring-module-0.1.0
    app.kubernetes.io/name: springboot-app
    app.kubernetes.io/instance: bd-spring-module
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: springboot-app
      app.kubernetes.io/instance: bd-spring-module
  template:
    metadata:
      labels:
        date: 2025-04-19
        helm.sh/chart: bd-spring-module-0.1.0
        app.kubernetes.io/name: springboot-app
        app.kubernetes.io/instance: bd-spring-module
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
        env: dev
        type: spring-boot
    spec:
      imagePullSecrets:
        - name: docker-reg-cred
      serviceAccountName: sa-devops
      containers:
        - name: bd-spring-module
          image: "brijeshdhaker/bd-spring-module:1.0.0"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9080
              protocol: TCP
          env:
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: bd-spring-module-configmap
                  key: environment
          livenessProbe:
            httpGet:
              path: /api/v1
              port: http
          readinessProbe:
            httpGet:
              path: /api/v1
              port: http
          resources:
            limits:
              cpu: 1500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 128Mi
          volumeMounts:
            - mountPath: /apps/sandbox
              name: vol-sandbox
              readOnly: true
            - mountPath: /apps/secrets
              name: vol-secret
              readOnly: true
            - mountPath: /apps/configs
              name: vol-configmap
              readOnly: true
      volumes:
        - hostPath:
            path: /apps/sandbox
            type: Directory
          name: vol-sandbox
        - name: vol-secret
          secret:
            optional: false
            secretName: springboot-app-secret
        - configMap:
            items:
            - key: application.yaml
              path: application.yaml
            name: springboot-app-configmap
            optional: false
          name: vol-configmap
---
# Source: bd-spring-module/templates/deployment.yaml
#
# kubectl run springboot-app -n sb-apps --image=brijeshdhaker/bd-spring-module:1.0.0 --port=9080 --dry-run=client -o yaml > app-springboot.yaml
# kubectl create deployment springboot-app -n sb-apps --image=brijeshdhaker/bd-spring-module:1.0.0 --dry-run=client -o yaml > app-springboot.yaml
# kubectl expose pod springboot-app -n sb-apps --port=80 --target-port=9080 --type=NodePort --dry-run=client -o yaml > app-svc.yaml
#
---
# Source: bd-spring-module/templates/secrets.yaml
#
# kubectl -n sb-apps create secret docker-registry docker-reg-cred --docker-server=https://index.docker.io/v1/ --docker-username=brijeshdhaker --docker-password=Accoo7@k47 --docker-email=brijeshdhaker@gmail.com --dry-run=client --output=yaml
# kubectl get secret docker-reg-cred --output="jsonpath={.data.\.dockerconfigjson}" | base64 --decode
# kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "docker-reg-cred"}]}'
#
---
# Source: bd-spring-module/templates/services.yaml
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  # by convention, use the name of the Service
  name: mysql-service-es
  # as a prefix for the name of the EndpointSlice
  labels:
    # You should set the "kubernetes.io/service-name" label.
    # Set its value to match the name of the Service
    kubernetes.io/service-name: mysql-service
addressType: IPv4
ports:
  - name: mysql
    protocol: TCP
    port: 3306
endpoints:
  - addresses:
      - "192.168.9.128"
  - addresses:
      - "192.168.30.128"
#  - addresses:
#      - "10.0.1.1"

#
---
# Source: bd-spring-module/templates/services.yaml
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  # by convention, use the name of the Service
  name: kafka-service-es
  # as a prefix for the name of the EndpointSlice
  labels:
    # You should set the "kubernetes.io/service-name" label.
    # Set its value to match the name of the Service
    kubernetes.io/service-name: kafka-service
addressType: IPv4
ports:
  - name: kafka
    protocol: TCP
    port: 9092
  - name: schema-registry
    protocol: TCP
    port: 8081
endpoints:
  - addresses:
      - "192.168.9.128"
  - addresses:
      - "192.168.30.128"
---
# Source: bd-spring-module/templates/services.yaml
apiVersion: v1
kind: Endpoints
metadata:
  name: mysql-docker
  labels:
    date: 2025-04-06
subsets:
  - addresses:
      - ip: 192.168.30.128
      - ip: 192.168.9.128
    ports:
      - name: mysql
        port: 3306

#
---
# Source: bd-spring-module/templates/gateways.yaml
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: http-gateway
spec:
  # The selector matches the ingress gateway pod labels.
  # If you installed Istio using Helm following the standard documentation, this would be "istio=ingress"
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "sbhttp.sandbox.net"
---
# Source: bd-spring-module/templates/gateways.yaml
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: https-gateway
spec:
  # The selector matches the ingress gateway pod labels.
  # If you installed Istio using Helm following the standard documentation, this would be "istio=ingress"
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 443
        name: https
        protocol: HTTPS
      tls:
        mode: SIMPLE
        credentialName: ingress-tls-credential
      hosts:
        - "sbhttps.sandbox.net"
---
# Source: bd-spring-module/templates/gateways.yaml
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: mtls-gateway
spec:
  # The selector matches the ingress gateway pod labels.
  # If you installed Istio using Helm following the standard documentation, this would be "istio=ingress"
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 443
        name: https
        protocol: HTTPS
      tls:
        mode: MUTUAL
        credentialName: ingress-mtls-credential
      hosts:
        - "sbmtls.sandbox.net"
---
# Source: bd-spring-module/templates/virtualservice.yaml
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: http-vsvc
spec:
  hosts:
    - "sbhttp.sandbox.net"
  gateways:
    - http-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        port:
          number: 9080
        host: springboot-app-svc
---
# Source: bd-spring-module/templates/virtualservice.yaml
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: https-vsvc
spec:
  hosts:
    - "sbhttps.sandbox.net"
  gateways:
    - https-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            port:
              number: 9080
            host: springboot-app-svc
---
# Source: bd-spring-module/templates/virtualservice.yaml
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: mtls-vsvc
spec:
  hosts:
    - "sbmtls.sandbox.net"
  gateways:
    - mtls-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            port:
              number: 9080
            host: springboot-app-svc
